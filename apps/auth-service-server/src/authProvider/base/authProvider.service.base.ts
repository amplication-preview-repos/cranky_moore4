/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, AuthProvider as PrismaAuthProvider } from "@prisma/client";

export class AuthProviderServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AuthProviderCountArgs, "select">
  ): Promise<number> {
    return this.prisma.authProvider.count(args);
  }

  async authProviders<T extends Prisma.AuthProviderFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AuthProviderFindManyArgs>
  ): Promise<PrismaAuthProvider[]> {
    return this.prisma.authProvider.findMany<Prisma.AuthProviderFindManyArgs>(
      args
    );
  }
  async authProvider<T extends Prisma.AuthProviderFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AuthProviderFindUniqueArgs>
  ): Promise<PrismaAuthProvider | null> {
    return this.prisma.authProvider.findUnique(args);
  }
  async createAuthProvider<T extends Prisma.AuthProviderCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AuthProviderCreateArgs>
  ): Promise<PrismaAuthProvider> {
    return this.prisma.authProvider.create<T>(args);
  }
  async updateAuthProvider<T extends Prisma.AuthProviderUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AuthProviderUpdateArgs>
  ): Promise<PrismaAuthProvider> {
    return this.prisma.authProvider.update<T>(args);
  }
  async deleteAuthProvider<T extends Prisma.AuthProviderDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.AuthProviderDeleteArgs>
  ): Promise<PrismaAuthProvider> {
    return this.prisma.authProvider.delete(args);
  }
}
